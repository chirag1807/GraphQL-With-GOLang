package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"articlewithgraphql/api/repository"
	errorhandling "articlewithgraphql/error"
	"articlewithgraphql/graph/model"
	"context"

	pgx "github.com/jackc/pgx/v5"
)

// GetArticleByID is the resolver for the getArticleByID field.
func (r *queryResolver) GetArticleByID(ctx context.Context, id int64) (*model.Article, error) {
	if ctx.Value("id") == nil {
		return &model.Article{}, errorhandling.TokenNotFound
	}
	article, err := repository.GetArticleById(ctx.Value("conn").(*pgx.Conn), id)
	return &article, err
}

// GetMyArticles is the resolver for the getMyArticles field.
func (r *queryResolver) GetMyArticles(ctx context.Context) ([]*model.Article, error) {
	articles := make([]*model.Article, 0)
	if ctx.Value("id") == nil {
		return articles, errorhandling.TokenNotFound
	}
	articles, err := repository.GetMyArticles(ctx.Value("conn").(*pgx.Conn), ctx.Value("id").(int64))
	return articles, err
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *queryResolver) DeleteArticle(ctx context.Context, id int64) (string, error) {
	if ctx.Value("id") == nil {
		return "", errorhandling.TokenNotFound
	}
	message, err := repository.DeleteArticle(ctx.Value("conn").(*pgx.Conn), id)
	return message, err
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
