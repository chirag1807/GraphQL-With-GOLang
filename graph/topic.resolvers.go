package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"articlewithgraphql/graph/model"
	"context"
	"fmt"
	// pgx "github.com/jackc/pgx/v5"
)

// Articles is the resolver for the articles field.
func (r *topicResolver) Articles(ctx context.Context, obj *model.Topic) ([]*model.Article, error) {
	// return repository.GetArticlesByTopicId2(ctx, ctx.Value("conn").(*pgx.Conn), *obj.ID)
	// pgx := ctx.Value("conn").(*pgx.Conn)
	pgx := r.DB
	rows, err := pgx.Query(ctx, `select id, title, content, topic, author from articles where topic = $1`, obj.ID)

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	var articlesSlice []*model.Article
	for rows.Next() {
		var article model.Article
		rows.Scan(&article.ID, &article.Title, &article.Content, &article.Topic, &article.Author)
		articlesSlice = append(articlesSlice, &article)
	}
	return articlesSlice, nil
}

// Topic returns TopicResolver implementation.
func (r *Resolver) Topic() TopicResolver { return &topicResolver{r} }

type topicResolver struct{ *Resolver }
